{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to NebulaGraph 3.6.0 Documentation","text":"<p>Note</p> <p>This manual is revised on 2023-12-5.</p> <p>NebulaGraph is a distributed and scalable graph database. It is the optimal solution in the world capable of hosting graphs with dozens of billions of vertices (nodes) and trillions of edges (relationships) with millisecond latency.</p>"},{"location":"#getting_started","title":"Getting started","text":"<ul> <li>Quick start</li> <li>Preparations before deployment</li> <li>nGQL cheatsheet</li> <li>FAQ</li> <li>Ecosystem Tools</li> </ul>"},{"location":"#release_notes","title":"Release notes","text":"<ul> <li>NebulaGraph 3.6.0</li> <li>NebulaGraph Dashboard</li> <li>NebulaGraph Explorer</li> <li>NebulaGraph Exchange</li> </ul>"},{"location":"#other_sources","title":"Other Sources","text":"<ul> <li>NebulaGraph Homepage</li> </ul>"},{"location":"#symbols_used_in_this_manual","title":"Symbols used in this manual","text":"<p>Note</p> <p>Additional information or operation-related notes.</p> <p>Caution</p> <p>May have adverse effects, such as causing performance degradation or triggering known minor problems.</p> <p>Warning</p> <p>May lead to serious issues, such as data loss or system crash.</p> <p>Danger</p> <p>May lead to extremely serious issues, such as system damage or information leakage.</p> <p>Compatibility</p> <p>The compatibility notes between nGQL and openCypher, or between the current version of nGQL and its prior ones. </p>"},{"location":"appendixes/glossary/","title":"Glossary","text":"<p>This topic introduces a list of terms and their meaning in the context of GQL and graph database systems in general.</p>"},{"location":"appendixes/glossary/#walk","title":"Walk","text":""},{"location":"gql-guide/data-types/","title":"Data types","text":"<p>In GQL grammer, each data type is either a GQL-object type or a value type. A GQL-object type is a data type comprising GQL-objects, and a value type is a data type comprising values.</p> <p>The following GQL-object types are available:</p> <ul> <li>Graph type</li> <li>Node type</li> <li>Edge type</li> <li>Binding table type </li> </ul> <p>The following value types are available:</p> <ul> <li>Numeric type</li> <li>Boolean type</li> <li>String type</li> <li>Temporal type</li> <li>List type</li> <li>Path type</li> <li>Record type</li> </ul>"},{"location":"gql-guide/data-types/binding-table-type/","title":"Binding table type","text":"<p>The binding table type is declared with the <code>BINDING TABLE</code> or <code>TABLE</code> keyword and describes the records that can occur in a binding table.</p> <p>Each binding table type comprises a record type. </p>"},{"location":"gql-guide/data-types/boolean-type/","title":"Boolean","text":"<p>The boolean type is declared with the <code>BOOL</code> or <code>BOOLEAN</code> keyword and can be set to the following values: <code>true</code>, <code>false</code>, and <code>null</code> (indicating the unknown truth value).</p>"},{"location":"gql-guide/data-types/c-string-type/","title":"String","text":"<p>The string type is declared with the <code>STRING</code> keyword and can contain a maximum of xxx characters in length.</p> <p>To QA?</p> <p>\u95ee\u9898\uff1a - \u662f\u5426\u53ef\u4ee5\u662f Null? - value range   - Escape characters? - out of range\u7684\u884c\u4e3a\uff1f</p>"},{"location":"gql-guide/data-types/edge-type/","title":"Edge type","text":"<p>The edge type is delcared with the <code>EDGE</code> or <code>RELATIONSHIP</code> keyword and describes the labels and properties that an edge may have, and the two types of nodes that are connected by the edge.</p> <p>Each edge type comprises:</p> <ul> <li>a set of labels, where each label has a name that is unique within the edge type.</li> <li>a set of property types, where each property type comprises:<ul> <li>a name that is unique within the edge type.</li> <li>a value type. </li> </ul> </li> <li>two types of nodes that are connected by the edge.</li> <li>an indication whether the edge type is directed or undirected.</li> </ul>"},{"location":"gql-guide/data-types/graph-type/","title":"Graph type","text":"<p>The graph type is declared with the <code>GRAPH</code> keyword and describes the graph elements (nodes and edges) that may occur in a graph.</p> <p>Each graph type is identified by a <code>&lt;graph type name&gt;</code> and comprises a set of node types and a set of edge types.</p>"},{"location":"gql-guide/data-types/list-type/","title":"List type","text":"<p>The list type is a composite type and declared with the <code>LIST</code> or <code>ARRAY</code> keyword. A list is an ordered collection of elements that can be accessed by their positions.</p>"},{"location":"gql-guide/data-types/list-type/#see_also","title":"See also","text":"<p>For how to define a property of the list type, see xxx.  -&gt; supported property data type \u653e\u54ea\u513f\u6bd4\u8f83\u597d\uff1f</p> <p>For how to construct a list value, see xxx(functions.)</p> <p>\u95ee\u9898\uff1a - \u662f\u5426\u53ef\u4ee5\u662f Null? - value range - out of range\u7684\u884c\u4e3a\uff1f</p>"},{"location":"gql-guide/data-types/node-type/","title":"Node type","text":"<p>The node type is delcared with the <code>NODE</code> or <code>VERTEX</code> keyword and describes the labels and properties that a node may have.</p> <p>Each node type comprises:</p> <ul> <li>a set of labels, where each label has a name that is unique within the node type.</li> <li>a set of property types, where each property type comprises:<ul> <li>a name that is unique within the node type.</li> <li>a value type. </li> </ul> </li> </ul>"},{"location":"gql-guide/data-types/numeric-type/","title":"Numeric types","text":"<p>GQL supports integer types and floating-point types. Integer types can be signed or unsigned, while floating-point types are always signed.</p> <p>\u95ee\u9898\uff1a - value range   - out of range\u7684\u884c\u4e3a\uff1f To QA</p>"},{"location":"gql-guide/data-types/numeric-type/#signed_integer","title":"Signed integer","text":"<p>Signed integer is either non-negative (positive or zero) or negative.</p> <p>The following table lists the signed interger types and their value ranges.</p> Type Declared keywords Range INT64 <code>INT64</code>, <code>INT</code> -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807 INT32 <code>INT32</code> -2,147,483,648 ~ 2,147,483,647 INT16 <code>INT16</code> -32,768 ~ 32,767 INT8 <code>INT8</code> -128 ~ 127"},{"location":"gql-guide/data-types/numeric-type/#unsigned_integer","title":"Unsigned integer","text":"<p>Unsigned integer is always non-negative.</p> <p>The following table lists the unsigned interger types and their value ranges.</p> Type Declared keywords Range UINT64 <code>UINT64</code> 0 ~ 18,446,744,073,709,551,615 UINT32 <code>UINT32</code> 0 ~ 4,294,967,295 UINT16 <code>UINT16</code> 0 ~ 65,535 UINT8 <code>UINT8</code> 0 ~ 255 UINT <code>UINT</code> ? USMALLINT <code>USMALLINT</code> ? UBIGINT <code>UBIGINT</code> ?"},{"location":"gql-guide/data-types/numeric-type/#floating-point","title":"Floating-point","text":"<p>Both single-precision floating-point format (FLOAT) and double-precision floating-point format (DOUBLE) are supported.</p> Type Declared keywords Range FLOAT32 <code>FLOAT32</code>, <code>FLOAT</code> 3.4E +/- 38 FLOAT64 <code>FLOAT64</code>, <code>DOUBLE</code> 1.7E +/- 308 <p>Scientific notation is also supported, such as <code>1e2</code>, <code>1.1e2</code>, <code>.3e4</code>, <code>1.e4</code>, and <code>-1234E-10</code>. \u662f\u5426\u652f\u6301\u79d1\u5b66\u8bb0\u6570\u6cd5\uff1f To QA</p>"},{"location":"gql-guide/data-types/path-type/","title":"Path","text":"<p>The path type is a composite type and declared with the <code>PATH</code> keyword.</p>"},{"location":"gql-guide/data-types/record-type/","title":"Record","text":"<p>The record type is a composite type and declared with the <code>RECORD</code> keyword. </p> <p>A record is a set of fields, each of which has a field name and a field value type. The field name is a identifier and the field value type is a value type.</p>"},{"location":"gql-guide/ddl/graph/create/","title":"CREATE GRAPH","text":"<p><code>CREATE GRAPH</code> is used to create a graph.</p>"},{"location":"gql-guide/ddl/graph/create/#syntax","title":"Syntax","text":"<pre><code>&lt;create graph statement&gt; ::=\n  CREATE { [ PROPERTY ] GRAPH [ IF NOT EXISTS ] }\n    &lt;graph name&gt; { &lt;of graph type&gt; }\n\n&lt;of graph type&gt; ::=\n   [ &lt;typed&gt; ] &lt;graph type reference&gt;  \n</code></pre>"},{"location":"gql-guide/ddl/graph/create/#description","title":"Description","text":"<p>The new graph is owned by the user issuing this statement.  </p> <p>All indexes defined in the graph type specified by <code>of graph type</code> are automatically created in the new graph.</p>"},{"location":"gql-guide/ddl/graph/create/#prerequisites","title":"Prerequisites","text":"<p>To create a graph, you must have <code>CREATE</code> privilege in the used schema and <code>READ</code> privilege for the graph type specified by <code>of graph type</code>.</p>"},{"location":"gql-guide/ddl/graph/create/#parameters","title":"Parameters","text":""},{"location":"gql-guide/ddl/graph/create/#if_not_exists","title":"<code>IF NOT EXISTS</code>","text":"<p>Checks if a graph with the same name already exists. If it does already exist, no exception is thrown and the execution ends.</p>"},{"location":"gql-guide/ddl/graph/create/#graph_name","title":"<code>&lt;graph name&gt;</code>","text":"<p>Specifies the name of the graph. The <code>&lt;graph name&gt;</code> is an identifier. For more information about identifiers, see Rules for naming identifiers.</p>"},{"location":"gql-guide/ddl/graph/create/#typed","title":"<code>&lt;typed&gt;</code>","text":"<p>Specifies whether the graph is typed. Valid values: <code>::</code> and <code>TYPED</code>. If you do not specify this parameter, or set its value to either of the valid values, the graph is always typed.</p>"},{"location":"gql-guide/ddl/graph/create/#graph_type_reference","title":"<code>&lt;graph type reference&gt;</code>","text":"<p>The <code>&lt;graph type reference&gt;</code> specifies the graph type referenced by the new graph. The types of the graph elements such as nodes and edges in the new graph are the same as those defined in the referenced graph type.</p> <p>Graphs of the same graph type are stored in different physical locations. Even if the graph elements such as nodes or edges in different graphs have the same identifiers, they are NOT regarded as the same entity.</p>"},{"location":"gql-guide/ddl/graph/create/#examples","title":"Examples","text":"<p>The following examples use the XXX dataset to demonstrate GQL statements. For more information about the dataset, see dataset introduction.</p>"},{"location":"gql-guide/ddl/graph/create/#create_a_graph_based_on_a_graph_type_in_the_default_schema","title":"Create a graph based on a graph type in the default schema","text":"<p><pre><code># Use either of the following statements to create a graph.\n\nCREATE GRAPH graph_name TYPED graph_type_name\nCREATE GRAPH IF NOT EXISTS graph_name :: graph_type_name\nCREATE GRAPH IF NOT EXISTS graph_name graph_type_name\n</code></pre> For more about how to create a graph type, see Create graph type.</p>"},{"location":"gql-guide/ddl/graph/drop/","title":"DROP GRAPH","text":"<p><code>DROP GRAPH</code> is used to drop a graph.</p>"},{"location":"gql-guide/ddl/graph/drop/#synatx","title":"Synatx","text":""},{"location":"gql-guide/ddl/graph/drop/#drop_graph_type_statement","title":"<code>&lt;drop graph type statement&gt;</code>","text":"<pre><code>&lt;drop graph statement&gt; ::=\n    DROP [ PROPERTY ] GRAPH [ IF EXISTS ] &lt;catalog graph parent and name&gt;\n</code></pre>"},{"location":"gql-guide/ddl/graph/drop/#prerequisites","title":"Prerequisites","text":"<p>To drop a graph, you must have <code>CREATE</code> privilege in the used schema.</p>"},{"location":"gql-guide/ddl/graph/drop/#effects","title":"Effects","text":"<p><code>DROP GRAPH</code> will drop the given graph from the catalog. The graph data will be deleted asynchronously.</p>"},{"location":"gql-guide/ddl/graph/drop/#parameters","title":"Parameters","text":""},{"location":"gql-guide/ddl/graph/drop/#if_exists","title":"<code>IF EXISTS</code>","text":"<p>When <code>IF EXISTS</code> not specified, an error will be returned if the given graph does not exists.</p>"},{"location":"gql-guide/ddl/graph/drop/#example","title":"Example","text":"<pre><code>DROP GRAPH g1\n</code></pre> <p>Drop the graph <code>g1</code>.</p>"},{"location":"gql-guide/ddl/graph-type/create/","title":"CREATE GRAPH TYPE","text":"<p><code>CREATE GRAPH TYPE</code> is used to create a graph type.</p>"},{"location":"gql-guide/ddl/graph-type/create/#syntax","title":"Syntax","text":""},{"location":"gql-guide/ddl/graph-type/create/#create_graph_type_statement","title":"<code>&lt;create graph type statement&gt;</code>","text":"<pre><code>&lt;create graph type statement&gt; ::=\n    CREATE\n        { [ PROPERTY ] GRAPH TYPE [ IF NOT EXISTS ] }\n        &lt;graph type name&gt; &lt;graph type source&gt;\n\n&lt;graph type source&gt; ::=\n    [ AS ] &lt;nested graph type specification&gt;\n\n&lt;nested graph type specification&gt; ::=\n    { &lt;graph type specification body&gt; }\n\n&lt;graph type specification body&gt; ::=\n    &lt;element type definition list&gt;\n\n&lt;element type definition list&gt; ::=\n    &lt;element type definition&gt; [ { , &lt;element type definition&gt; }... ]\n\n&lt;element type definition&gt; ::=\n    &lt;node type definition&gt;\n    | &lt;edge type definition&gt;\n</code></pre>"},{"location":"gql-guide/ddl/graph-type/create/#node_type_definition","title":"<code>&lt;node type definition&gt;</code>","text":"<pre><code>&lt;node type definition&gt; ::=\n    &lt;node type pattern&gt;\n\n&lt;node type pattern&gt; ::=\n    ( [ &lt;node type name and primary key&gt; ] [ &lt;node type filler&gt; ] )\n\n&lt;node type name and primary key&gt; ::=\n    &lt;node type name&gt; ( &lt;primary key name&gt; )\n</code></pre> <p>Noticed that in current implementation, all node types require primary key property. See the <code>&lt;node type name&gt;</code> for detail differences.</p>"},{"location":"gql-guide/ddl/graph-type/create/#node_type_filler","title":"<code>&lt;node type filler&gt;</code>","text":"<pre><code>&lt;node type filler&gt; ::=\n    &lt;node type label set definition&gt;\n    | &lt;node type property type set definition&gt;\n    | &lt;node type label set definition&gt; &lt;node type property type set definition&gt;\n\n&lt;node type label set definition&gt; ::=\n    &lt;label set definition&gt;\n\n&lt;node type property type set definition&gt; ::=\n    &lt;property type set definition&gt;\n</code></pre>"},{"location":"gql-guide/ddl/graph-type/create/#label_set_definition","title":"<code>&lt;label set definition&gt;</code>","text":"<pre><code>&lt;label set definition&gt; ::=\n    LABEL &lt;label name&gt;\n    | LABELS &lt;label set specification&gt;\n    | &lt; IS | : &gt; &lt;label set specification&gt;\n</code></pre>"},{"location":"gql-guide/ddl/graph-type/create/#property_type_set_definition","title":"<code>&lt;property type set definition&gt;</code>","text":"<pre><code>&lt;property type set definition&gt; ::=\n    { [ &lt;property type definition list&gt; ] }\n\n&lt;property type definition list&gt; ::=\n    &lt;property type definition&gt; [ { , &lt;property type definition&gt; }... ]\n\n&lt;property type definition&gt; ::=\n    &lt;property name&gt; [ :: | TYPED ] &lt;property value type&gt;\n</code></pre> <p>For details property value type, please refer to DataType doc.</p>"},{"location":"gql-guide/ddl/graph-type/create/#edge_type_definition","title":"<code>&lt;edge type definition&gt;</code>","text":"<pre><code>&lt;edge type definition&gt; ::=\n    &lt;edge type pattern&gt;\n\n&lt;edge type pattern&gt; ::=\n    &lt;full edge type pattern&gt;\n\n&lt;full edge type pattern&gt; ::=\n    &lt;full edge type pattern pointing right&gt;\n    | &lt;full edge type pattern pointing left&gt;\n\n&lt;full edge type pattern pointing right&gt; ::=\n    &lt;source node type reference&gt; &lt;arc type pointing right&gt; &lt;destination node type reference&gt;\n\n&lt;full edge type pattern pointing left&gt; ::=\n    &lt;destination node type reference&gt; &lt;arc type pointing left&gt; &lt;source node type reference&gt;\n\n\n&lt;arc type pointing right&gt; ::=\n    -[ &lt;arc type filler&gt; ]-&gt; \n\n&lt;arc type pointing left&gt; ::=\n    &lt;-[ &lt;arc type filler&gt; ]-\n\n&lt;source node type reference&gt; ::=\n    ( &lt;source node type name&gt; )\n    | ( [ &lt;node type filler&gt; ] )\n\n&lt;destination node type reference&gt; ::=\n    ( &lt;destination node type name&gt; )\n    | ( [ &lt;node type filler&gt; ] )\n</code></pre>"},{"location":"gql-guide/ddl/graph-type/create/#arc_type_filler","title":"<code>&lt;arc type filler&gt;</code>","text":"<pre><code>&lt;arc type filler&gt; ::=\n    &lt;edge type name&gt; &lt;edge type filler&gt;\n\n&lt;edge type filler&gt; ::=\n    &lt;edge type label set definition&gt;\n    | &lt;edge type property type set definition&gt;\n    | &lt;edge type label set definition&gt; &lt;edge type property type set definition&gt;\n\n&lt;edge type label set definition&gt; ::=\n    &lt;label set definition&gt;\n\n&lt;edge type property type set definition&gt; ::=\n    &lt;property type set definition&gt;\n</code></pre>"},{"location":"gql-guide/ddl/graph-type/create/#description","title":"Description","text":""},{"location":"gql-guide/ddl/graph-type/create/#prerequisites","title":"Prerequisites","text":"<p>To create a graph type, you must have <code>CREATE</code> privilege in the used schema.</p>"},{"location":"gql-guide/ddl/graph-type/create/#parameters","title":"Parameters","text":""},{"location":"gql-guide/ddl/graph-type/create/#if_not_exists","title":"IF NOT EXISTS","text":""},{"location":"gql-guide/ddl/graph-type/create/#graph_type_name","title":"<code>&lt;graph type name&gt;</code>","text":"<p>The name of the graph type to be created.</p>"},{"location":"gql-guide/ddl/graph-type/create/#node_type_name","title":"<code>&lt;node type name&gt;</code>","text":"<p>The name of a node type in the graph type to be created.</p>"},{"location":"gql-guide/ddl/graph-type/create/#edge_type_name","title":"<code>&lt;edge type name&gt;</code>","text":"<p>The name of an edge type in the graph type to be created.</p>"},{"location":"gql-guide/ddl/graph-type/create/#primary_key_name","title":"<code>&lt;primary key name&gt;</code>","text":"<p>The name of the property that functions as the primary key. The property must be defined in <code>&lt;node type property type set definition&gt;</code>.</p>"},{"location":"gql-guide/ddl/graph-type/create/#label_name","title":"<code>&lt;label name&gt;</code>","text":"<p>The name of a single label of the node type or edge type in the graph type. To define multiple labels, refer to <code>&lt;label set specification&gt;</code>.</p>"},{"location":"gql-guide/ddl/graph-type/create/#label_set_specification","title":"<code>&lt;label set specification&gt;</code>","text":"<p>The names of multiple labels of the node type or edge type in the graph type. Separate multiple names with ampersand (<code>&amp;</code>). For example, <code>Label1&amp;Label2</code>.</p>"},{"location":"gql-guide/ddl/graph-type/create/#property_name","title":"<code>&lt;property name&gt;</code>","text":"<p>The name of a property of a node type or edge type in the graph type.</p>"},{"location":"gql-guide/ddl/graph-type/create/#property_value_type","title":"<code>&lt;property value type&gt;</code>","text":"<p>The value type of a property of a node type or edge type in the graph type. For details, refer to DataType doc.</p>"},{"location":"gql-guide/ddl/graph-type/create/#source_node_type_name","title":"<code>&lt;source node type name&gt;</code>","text":"<p>The name of the source node type of the edge type. The source node type must be one of the node types defined in the graph type.</p>"},{"location":"gql-guide/ddl/graph-type/create/#destination_node_type_name","title":"<code>&lt;destination node type name&gt;</code>","text":"<p>The name of the destination node type of the edge type. The destination node type must be one of the node types defined in the graph type.</p>"},{"location":"gql-guide/ddl/graph-type/create/#examples","title":"Examples","text":""},{"location":"gql-guide/ddl/graph-type/create/#scenario_1_create_a_graph_type","title":"Scenario 1: Create a graph type","text":"<pre><code>CREATE GRAPH TYPE gt1 AS {\n    (Place(id) LABELS City&amp;Country {id INT, name STRING, url STRING, kind STRING}),\n    (Student(id) LABEL Person {id INT, firstName STRING, lastName STRING, gender STRING, birthday DATE}),\n    (Student)-[Likes:Knows{since LOCALDATETIME}]-&gt;(Student),\n    (Place)&lt;-[Lives:Locates]-(Student)\n}\n</code></pre> <p>Create a graph type named \"gt1\" with two node types and two edge types: * node type Place with two labels (City/Country), four properties (id/name/url/kind) with value types respectively. * node type Student with only one label Person, five properties (id/firstName/lastName/gender/birthday). * edge type Likes with source node type Student and destination node type Student, one label Knows, one property since. * edge type Lives with source node type Student and destination node type Place, one label Locates, no property.</p>"},{"location":"gql-guide/ddl/graph-type/create/#scenario_2_create_a_graph_type_with_if_not_exists","title":"Scenario 2: Create a graph type with <code>IF NOT EXISTS</code>","text":"<pre><code>CREATE GRAPH TYPE IF NOT EXISTS gt2 AS {\n    (Student(id) : Person {id INT, firstName STRING, lastName STRING, gender STRING, birthday DATE}),\n    (Student)-[Likes LABEL KNOWS {since LOCALDATETIME}]-&gt;(Student)\n}\n</code></pre> <p>Create a graph type named \"gt2\" with one node type and one edge type if graph type <code>gt2</code> doest not exist. If graph type <code>gt2</code>, nothing happens.</p>"},{"location":"gql-guide/ddl/graph-type/drop/","title":"DROP GRAPH TYPE","text":"<p><code>DROP GRAPH TYPE</code> is used to drop a graph type. Once successfully executed, all graphs of the graph type are dropped as well.</p>"},{"location":"gql-guide/ddl/graph-type/drop/#synatx","title":"Synatx","text":""},{"location":"gql-guide/ddl/graph-type/drop/#drop_graph_type_statement","title":"<code>&lt;drop graph type statement&gt;</code>","text":"<pre><code>&lt;drop graph type statement&gt; ::=\n    DROP [ PROPERTY ] GRAPH TYPE [ IF EXISTS ] &lt;catalog graph type parent and name&gt;\n</code></pre>"},{"location":"gql-guide/ddl/graph-type/drop/#description","title":"Description","text":"<p><code>DROP GRAPH TYPE</code> will drop the given graph type from the catalog. All graph instance of the graph type will be dropped as well, if any. The graph data will be deleted asynchronously.</p>"},{"location":"gql-guide/ddl/graph-type/drop/#prerequisites","title":"Prerequisites","text":"<p>To drop a graph type, you must have <code>CREATE</code> privilege in the used schema.</p>"},{"location":"gql-guide/ddl/graph-type/drop/#parameters","title":"Parameters","text":""},{"location":"gql-guide/ddl/graph-type/drop/#if_exists","title":"<code>IF EXISTS</code>","text":"<p>When <code>IF EXISTS</code> not specified, an error will be returned if the given graph type does not exists.</p>"},{"location":"gql-guide/ddl/graph-type/drop/#example","title":"Example","text":"<pre><code>DROP GRAPH TYPE gt1\n</code></pre> <p>Drop the graph type <code>gt1</code> as well as all the graphs created from <code>gt1</code>.</p>"},{"location":"gql-guide/functions-and-expressions/graph/","title":"Graph functions","text":"<p>This topic introduces graph-related functions.</p>"},{"location":"gql-guide/functions-and-expressions/graph/#element_id","title":"element_id()","text":""},{"location":"gql-guide/functions-and-expressions/graph/#startnode","title":"startNode()","text":""},{"location":"gql-guide/functions-and-expressions/graph/#endnode","title":"endNode()","text":""},{"location":"gql-guide/functions-and-expressions/graph/#nodes","title":"nodes()","text":""},{"location":"gql-guide/functions-and-expressions/list/","title":"List functions","text":"<p>This topic introduces list functions.</p>"},{"location":"gql-guide/functions-and-expressions/list/#list_value_constructor","title":"list value constructor","text":""},{"location":"gql-guide/functions-and-expressions/list/#length","title":"length()","text":""},{"location":"gql-guide/functions-and-expressions/list/#head","title":"head()","text":""},{"location":"gql-guide/functions-and-expressions/list/#back","title":"back()","text":""},{"location":"gql-guide/functions-and-expressions/list/#range","title":"range()","text":""},{"location":"gql-guide/functions-and-expressions/math/","title":"Math functions","text":"<p>This topic introduces math functions.</p>"},{"location":"gql-guide/functions-and-expressions/math/#abs","title":"abs()","text":""},{"location":"gql-guide/functions-and-expressions/math/#floor","title":"floor()","text":""},{"location":"gql-guide/functions-and-expressions/operators/","title":"Operators","text":"<p>This section introduces the operators.</p> Precedence Name Description Arity 1 . get property from Node,Edge or Record 2 2 [] get the element of index in the list 1 3 * multiplication 2 3 / division 2 4 + addition 2 4 - subtraction 2 5 &lt; \"less than\" comparison 2 5 &gt; \"greater than\" comparison 2 5 &lt;= \"less than or equal\" comparison 2 5 &gt;= \"greater than or equal\" comparison 2 5 = \"equal\" comparison 2 5 &lt;&gt; \"not equal\" comparison 2 5 IS NULL/IS NOT NULL Check if it is null 1 6 NOT logical NOT 1 7 AND logical AND 2 8 OR logical OR 2 8 XOR logical XOR 2"},{"location":"gql-guide/functions-and-expressions/string/","title":"String functions","text":"<p>This topic introduces string functions.</p>"},{"location":"gql-guide/functions-and-expressions/string/#substring","title":"substring()","text":""},{"location":"gql-guide/functions-and-expressions/temporal/","title":"Temporal functions","text":"<p>This topic introduces temporal functions.</p>"},{"location":"gql-guide/functions-and-expressions/temporal/#date","title":"date()","text":""},{"location":"gql-guide/functions-and-expressions/temporal/#localdatetime","title":"localdatetime()","text":""},{"location":"gql-guide/overview/example-dataset/","title":"Example dataset","text":"<p>This topic introduces the example dataset used in the documentation and demonstrates how to import it to NebulaGraph for exploration.</p>"},{"location":"gql-guide/overview/example-dataset/#prerequsites","title":"Prerequsites","text":"<ul> <li>NebulaGraph is deployed either on-premises or on the cloud.</li> <li>A basic understanding of GQL is obtained.</li> </ul>"},{"location":"gql-guide/overview/example-dataset/#dataset_introduction","title":"Dataset introduction","text":""},{"location":"gql-guide/overview/example-dataset/#import_dataset_into_nebulagraph","title":"Import dataset into NebulaGraph","text":"<ol> <li> <p>Create a graph type and a graph</p> </li> <li> <p>Import data with Importer</p> </li> <li></li> </ol>"},{"location":"gql-guide/overview/graph-patterns/","title":"Graph patterns","text":"<p>A graph pattern is a collection of path patterns, which when applied to a property graph, results in a set of path bindings, each mapping variables in the expression to graph elements (node and edges) forming a path in the graph.</p> <p>These variable bindings can be used to refer to the graph elements and the values of their properties.</p>"},{"location":"gql-guide/overview/keywords-identifiers/","title":"Keywords and identifiers","text":"<p>Keywords and identifiers are two fundamental components in GQL statements.</p>"},{"location":"gql-guide/overview/keywords-identifiers/#keywords","title":"Keywords","text":"<p>Keywords are words with specific meanings in GQL, such as <code>CREATE</code> and <code>GRAPH</code> in the <code>CREATE GRAPH</code> statement.</p>"},{"location":"gql-guide/overview/keywords-identifiers/#identifiers","title":"Identifiers","text":"<p>Identifiers are commonly used to identify objects like graphs and graph types.</p>"},{"location":"gql-guide/overview/keywords-identifiers/#rules_for_naming_identifiers","title":"Rules for naming identifiers","text":"<p>In GQL statements, a identifier is either a regular identifier or a delimited identifier. </p> <ul> <li>A regular identifier must start with a Unicode letter or an underscore (_). Subsequent characters can be Unicode letters, underscores (_), or digits (0-9).</li> <li>A delimited identifier is a character string enclosed with double quotes (\") or back quotes(`).</li> </ul>"},{"location":"gql-guide/overview/nullability/","title":"Nullability","text":""}]}